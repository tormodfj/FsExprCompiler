// Implementation file for parser generated by fsyacc
module ExprParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "ExprParser.fsy"

open Expr

# 10 "ExprParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | ADD
  | SUB
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | ID of (string)
  | DOUBLE of (double)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_ID
    | TOKEN_DOUBLE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expr
    | NONTERM_value

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | ADD  -> 1 
  | SUB  -> 2 
  | MUL  -> 3 
  | DIV  -> 4 
  | LPAREN  -> 5 
  | RPAREN  -> 6 
  | ID _ -> 7 
  | DOUBLE _ -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_ADD 
  | 2 -> TOKEN_SUB 
  | 3 -> TOKEN_MUL 
  | 4 -> TOKEN_DIV 
  | 5 -> TOKEN_LPAREN 
  | 6 -> TOKEN_RPAREN 
  | 7 -> TOKEN_ID 
  | 8 -> TOKEN_DOUBLE 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_value 
    | 10 -> NONTERM_value 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | ADD  -> "ADD" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | ID _ -> "ID" 
  | DOUBLE _ -> "DOUBLE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOUBLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 6us; 65535us; 0us; 2us; 4us; 5us; 12us; 8us; 13us; 9us; 14us; 10us; 15us; 11us; 6us; 65535us; 0us; 7us; 4us; 7us; 12us; 7us; 13us; 7us; 14us; 7us; 15us; 7us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 10us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 5us; 2us; 5us; 6us; 7us; 8us; 1us; 2us; 1us; 3us; 5us; 3us; 5us; 6us; 7us; 8us; 1us; 3us; 1us; 4us; 5us; 5us; 5us; 6us; 7us; 8us; 5us; 5us; 6us; 6us; 7us; 8us; 5us; 5us; 6us; 7us; 7us; 8us; 5us; 5us; 6us; 7us; 8us; 8us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 10us; 12us; 14us; 20us; 22us; 24us; 30us; 36us; 42us; 48us; 50us; 52us; 54us; 56us; 58us; |]
let _fsyacc_action_rows = 18
let _fsyacc_actionTableElements = [|3us; 16385us; 5us; 4us; 7us; 17us; 8us; 16us; 0us; 49152us; 5us; 32768us; 0us; 3us; 1us; 12us; 2us; 13us; 3us; 14us; 4us; 15us; 0us; 16386us; 3us; 32768us; 5us; 4us; 7us; 17us; 8us; 16us; 5us; 32768us; 1us; 12us; 2us; 13us; 3us; 14us; 4us; 15us; 6us; 6us; 0us; 16387us; 0us; 16388us; 2us; 16389us; 3us; 14us; 4us; 15us; 2us; 16390us; 3us; 14us; 4us; 15us; 0us; 16391us; 0us; 16392us; 3us; 32768us; 5us; 4us; 7us; 17us; 8us; 16us; 3us; 32768us; 5us; 4us; 7us; 17us; 8us; 16us; 3us; 32768us; 5us; 4us; 7us; 17us; 8us; 16us; 3us; 32768us; 5us; 4us; 7us; 17us; 8us; 16us; 0us; 16393us; 0us; 16394us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 11us; 12us; 16us; 22us; 23us; 24us; 27us; 30us; 31us; 32us; 36us; 40us; 44us; 48us; 49us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 0us; 2us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16386us; 65535us; 65535us; 16387us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 16394us; |]
let _fsyacc_reductions ()  =    [| 
# 126 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expr.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 135 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "ExprParser.fsy"
                                             Value(Double(0.0)) 
                   )
# 20 "ExprParser.fsy"
                 : Expr.expr));
# 145 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "ExprParser.fsy"
                                             _1 
                   )
# 21 "ExprParser.fsy"
                 : Expr.expr));
# 156 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "ExprParser.fsy"
                                             _2 
                   )
# 24 "ExprParser.fsy"
                 : 'expr));
# 167 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "ExprParser.fsy"
                                             Value(_1) 
                   )
# 25 "ExprParser.fsy"
                 : 'expr));
# 178 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "ExprParser.fsy"
                                             Expr(_1, Add, _3) 
                   )
# 26 "ExprParser.fsy"
                 : 'expr));
# 190 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "ExprParser.fsy"
                                             Expr(_1, Sub, _3) 
                   )
# 27 "ExprParser.fsy"
                 : 'expr));
# 202 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "ExprParser.fsy"
                                             Expr(_1, Mul, _3) 
                   )
# 28 "ExprParser.fsy"
                 : 'expr));
# 214 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "ExprParser.fsy"
                                             Expr(_1, Div, _3) 
                   )
# 29 "ExprParser.fsy"
                 : 'expr));
# 226 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "ExprParser.fsy"
                                             Double(_1) 
                   )
# 32 "ExprParser.fsy"
                 : 'value));
# 237 "ExprParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "ExprParser.fsy"
                                             Variable(_1) 
                   )
# 33 "ExprParser.fsy"
                 : 'value));
|]
# 249 "ExprParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Expr.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
